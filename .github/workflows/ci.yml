name: CI

on:
  push:
    branches: [ main, develop, feature/*, bugfix/*, release/* ]
  pull_request:
    branches: [ main, develop, feature/*, bugfix/*, release/* ]

permissions:
  contents: read
  actions: read

concurrency:
  group: "test-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "24"
        cache: "npm"

    - name: Install dependencies (including Foundry CLI)
      run: |
        npm install

    - name: Install OS dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr libtesseract-dev poppler-utils
        tesseract --version

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run pre-commit hooks (single source of truth for lint & mypy)
      run: |
        pre-commit run --all-files --show-diff-on-failure

    - name: Run Unit Tests with pytest
      run: |
        pytest tests/unit/ --cov=pdf2foundry --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package with twine
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/

  # Optional: Test installation on different OS
  test-install:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/

    - name: Install package (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        set -euo pipefail
        python -m pip install --upgrade pip
        if compgen -G "dist/*.whl" > /dev/null; then
          pip install dist/*.whl
        elif compgen -G "dist/*.tar.gz" > /dev/null; then
          pip install dist/*.tar.gz
        else
          echo "No wheel or sdist found under dist/" >&2
          exit 1
        fi

    - name: Install package (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        $file = Get-ChildItem -Path dist -Recurse -Include *.whl, *.tar.gz | Select-Object -First 1
        if ($null -eq $file) { Write-Error "No wheel or sdist found under dist/" }
        pip install $file.FullName

    - name: Test CLI entrypoint
      run: |
        pdf2foundry --help
