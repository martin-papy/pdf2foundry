name: "Tier 2: Feature Tests"

on:
  workflow_call:
    inputs:
      tier1_success:
        description: "Whether Tier 1 tests passed"
        required: true
        type: boolean
    outputs:
      success:
        description: "Whether Tier 2 tests passed"
        value: ${{ jobs.feature-tests.outputs.success }}
      

env:
  PYTHONUNBUFFERED: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

permissions:
  contents: read

jobs:
  feature-tests:
    name: "Feature Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: inputs.tier1_success == true
    
    concurrency:
      group: tier2-${{ github.ref }}
      cancel-in-progress: true
      
    outputs:
      success: ${{ steps.test-result.outputs.success }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr libtesseract-dev poppler-utils
          tesseract --version
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-tier2-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-tier2-
            ${{ runner.os }}-pip-
            
      - name: Install full dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: System diagnostics
        run: |
          echo "=== Tier 2 Environment ==="
          python --version
          tesseract --version
          echo "=== Disk Usage ==="
          df -h
          echo "=== Python Packages (Full) ==="
          pip list | grep -E "(pytest|docling|pytesseract|transformers|torch)"
          echo "=== Feature Detection ==="
          python -c "
          from pdf2foundry.core.feature_detection import FeatureAvailability
          features = FeatureAvailability.get_available_features()
          for name, available in features.items():
              status = '✅' if available else '❌'
              print(f'{status} {name}: {available}')
          "
          
      - name: Resolve PDF2FOUNDRY_CLI path
        run: |
          CLI_PATH=$(python -c "import shutil; print(shutil.which('pdf2foundry') or 'pdf2foundry')")
          echo "PDF2FOUNDRY_CLI=$CLI_PATH" >> $GITHUB_ENV
          echo "Resolved CLI path: $CLI_PATH"
          
      - name: Create reports directory
        run: mkdir -p reports/tier2
        
      - name: Run Tier 2 tests
        env:
          PDF2FOUNDRY_CLI: ${{ env.PDF2FOUNDRY_CLI }}
          PERF_THRESHOLD: '0.2'
          CI: "1"
        run: |
          echo "Running Tier 2 tests with full dependencies (excluding ML models)..."
          pytest tests/e2e -m "tier2 and not requires_models" -v --tb=short \
            --junitxml=reports/tier2/junit.xml \
            --durations=15 \
            --maxfail=5 \
            -n auto
            
      - name: Set test result
        id: test-result
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ Tier 2 tests passed"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ Tier 2 tests failed"
          fi
          
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tier2-reports-${{ github.run_id }}
          path: |
            reports/tier2/**
            tests/e2e/perf/*.json
            .pytest_cache/**
          retention-days: 7
