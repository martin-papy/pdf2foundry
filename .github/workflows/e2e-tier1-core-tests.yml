name: "Tier 1: Core Tests"

on:
  workflow_call:
    outputs:
      success:
        description: "Whether Tier 1 tests passed"
        value: ${{ jobs.core-tests.outputs.success }}

env:
  PYTHONUNBUFFERED: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

permissions:
  contents: read

jobs:
  core-tests:
    name: "Core Functionality Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    concurrency:
      group: tier1-${{ github.ref }}
      cancel-in-progress: true
    
    outputs:
      success: ${{ steps.test-result.outputs.success }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install minimal dependencies for CI
        env:
          PDF2FOUNDRY_CI_MINIMAL: "1"
          CI: "1"
        run: |
          python -m pip install --upgrade pip
          # Install minimal core dependencies + testing dependencies from pyproject.toml
          pip install -e ".[ci-minimal,dev]"
          
      - name: System diagnostics
        run: |
          echo "=== Tier 1 Environment ==="
          python --version
          echo "=== Disk Usage ==="
          df -h
          echo "=== Python Packages (Core) ==="
          pip list | grep -E "(pytest|docling|pillow|typer|rich)"
          echo "=== Feature Detection ==="
          python -c "
          from pdf2foundry.core.feature_detection import FeatureAvailability
          features = FeatureAvailability.get_available_features()
          for name, available in features.items():
              status = '✅' if available else '❌'
              print(f'{status} {name}: {available}')
          "
          
      - name: Resolve PDF2FOUNDRY_CLI path
        run: |
          CLI_PATH=$(python -c "import shutil; print(shutil.which('pdf2foundry') or 'pdf2foundry')")
          echo "PDF2FOUNDRY_CLI=$CLI_PATH" >> $GITHUB_ENV
          echo "Resolved CLI path: $CLI_PATH"
          
      - name: Create reports directory
        run: mkdir -p reports/tier1
        
      - name: Run Tier 1 tests
        env:
          PDF2FOUNDRY_CLI: ${{ env.PDF2FOUNDRY_CLI }}
          PDF2FOUNDRY_CI_MINIMAL: "1"
          PDF2FOUNDRY_CONVERSION_TIMEOUT: "90"
          CI: "1"
        run: |
          echo "Running Tier 1 tests with minimal dependencies..."
          pytest tests/e2e -m "tier1" -v --tb=short \
            --junitxml=reports/tier1/junit.xml \
            --durations=10 \
            --maxfail=3
            
      - name: Set test result
        id: test-result
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ Tier 1 tests passed"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ Tier 1 tests failed"
          fi
          
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tier1-reports-${{ github.run_id }}
          path: |
            reports/tier1/**
            .pytest_cache/**
          retention-days: 7
